{"ast":null,"code":"var _jsxFileName = \"/Users/jianpeng/Desktop/PDFExtract/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from \"react\";\nimport axios from \"axios\";\nimport UploadComponent from \"./components/UploadComponent\";\nimport PdfViewerComponent from \"./components/PdfViewerComponent\";\n\n// Function to apply basic syntax highlighting to JSON\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst syntaxHighlight = json => {\n  if (typeof json !== \"string\") {\n    json = JSON.stringify(json, undefined, 2);\n  }\n  json = json.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n  return json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|\\b-?\\d+(?:\\.\\d*)?(?:[eE][+-]?\\d+)?\\b)/g, match => {\n    let cls = \"number\";\n    if (/^\"/.test(match)) {\n      if (/:$/.test(match)) {\n        cls = \"key\";\n      } else {\n        cls = \"string\";\n      }\n    } else if (/true|false/.test(match)) {\n      cls = \"boolean\";\n    } else if (/null/.test(match)) {\n      cls = \"null\";\n    }\n    return `<span class=\"${cls}\">${match}</span>`;\n  });\n};\nfunction App() {\n  _s();\n  const [pdfFiles, setPdfFiles] = useState([]); // Store PDF files\n  const [schemas, setSchemas] = useState({}); // Store JSON schemas for each PDF\n  const [isLoading, setIsLoading] = useState(false);\n  const jsonDivRefs = useRef({}); // Refs for each JSON div to handle cursor positions\n\n  // Handle multiple file uploads\n  const onDrop = async acceptedFiles => {\n    if (acceptedFiles.length === 0) return;\n    setIsLoading(true);\n    for (const file of acceptedFiles) {\n      const formData = new FormData();\n      formData.append(\"pdf\", file);\n      try {\n        const response = await axios.post(\"http://localhost:5001/upload\", formData, {\n          headers: {\n            \"Content-Type\": \"multipart/form-data\"\n          }\n        });\n\n        // Update the state with the received JSON schema for each file\n        if (response.data && response.data.schema) {\n          setPdfFiles(prevFiles => [...prevFiles, file]);\n          setSchemas(prevSchemas => ({\n            ...prevSchemas,\n            [file.name]: {\n              schema: response.data.schema,\n              jsonEditValue: JSON.stringify(response.data.schema, null, 2)\n            }\n          }));\n        }\n      } catch (error) {\n        console.error(\"Error uploading PDF:\", error);\n      }\n    }\n    setIsLoading(false);\n  };\n\n  // Handle changes to the editable JSON text area for each PDF\n  const handleJsonEditChange = (pdfName, event) => {\n    const selection = window.getSelection();\n    const range = selection.getRangeAt(0);\n    const startOffset = range.startOffset;\n    const updatedJsonEditValue = event.target.textContent;\n    setSchemas(prevSchemas => ({\n      ...prevSchemas,\n      [pdfName]: {\n        ...prevSchemas[pdfName],\n        jsonEditValue: updatedJsonEditValue\n      }\n    }));\n\n    // Restore cursor position after updating the content\n    setTimeout(() => {\n      if (jsonDivRefs.current[pdfName]) {\n        const newRange = document.createRange();\n        newRange.setStart(jsonDivRefs.current[pdfName].childNodes[0], startOffset);\n        newRange.collapse(true);\n        selection.removeAllRanges();\n        selection.addRange(newRange);\n      }\n    }, 0);\n  };\n\n  // Function to download the JSON schema for each PDF\n  const downloadJson = pdfName => {\n    var _schemas$pdfName;\n    const schemaData = (_schemas$pdfName = schemas[pdfName]) === null || _schemas$pdfName === void 0 ? void 0 : _schemas$pdfName.schema;\n    if (!schemaData) return;\n\n    // Create a Blob with the JSON data\n    const jsonString = JSON.stringify(schemaData, null, 2);\n    const blob = new Blob([jsonString], {\n      type: \"application/json\"\n    });\n\n    // Create an anchor element and trigger a download\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = `${pdfName.replace(\".pdf\", \"_schema.json\")}`; // Generate filename\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      height: \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"50%\",\n        padding: \"20px\",\n        borderRight: \"1px solid #ccc\",\n        overflowY: \"auto\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(UploadComponent, {\n        onDrop: onDrop,\n        isLoading: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this), pdfFiles.map(file => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: \"20px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          style: {\n            color: \"#000\"\n          },\n          children: file.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(PdfViewerComponent, {\n          pdfFile: file\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 25\n        }, this)]\n      }, file.name, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"50%\",\n        padding: \"20px\",\n        overflowY: \"auto\"\n      },\n      children: pdfFiles.map(file => {\n        var _schemas$pdfName2;\n        const pdfName = file.name;\n        const schema = (_schemas$pdfName2 = schemas[pdfName]) === null || _schemas$pdfName2 === void 0 ? void 0 : _schemas$pdfName2.jsonEditValue;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: \"30px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            style: {\n              color: \"#000\"\n            },\n            children: [\"Highlighted JSON Schema Preview for \", pdfName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 29\n          }, this), schema && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              ref: el => jsonDivRefs.current[pdfName] = el,\n              contentEditable: true,\n              onInput: e => handleJsonEditChange(pdfName, e),\n              dangerouslySetInnerHTML: {\n                __html: syntaxHighlight(schema)\n              },\n              style: {\n                width: \"100%\",\n                padding: \"15px\",\n                fontFamily: \"monospace\",\n                fontSize: \"14px\",\n                border: \"1px solid #ccc\",\n                borderRadius: \"4px\",\n                backgroundColor: \"#2b2b2b\",\n                color: \"#ffffff\",\n                overflow: \"auto\",\n                whiteSpace: \"pre\",\n                outline: \"none\",\n                marginBottom: \"10px\",\n                resize: \"vertical\" // Allows resizing vertically\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: \"flex\",\n                gap: \"10px\",\n                marginBottom: \"20px\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => {\n                  try {\n                    const parsedJson = JSON.parse(schemas[pdfName].jsonEditValue);\n                    setSchemas(prevSchemas => ({\n                      ...prevSchemas,\n                      [pdfName]: {\n                        ...prevSchemas[pdfName],\n                        schema: parsedJson\n                      }\n                    }));\n                    alert(\"JSON updated successfully!\");\n                  } catch (error) {\n                    alert(\"Invalid JSON format. Please correct it before saving.\");\n                  }\n                },\n                style: {\n                  padding: \"10px\",\n                  backgroundColor: \"#007bff\",\n                  color: \"#fff\",\n                  border: \"none\",\n                  borderRadius: \"4px\",\n                  cursor: \"pointer\"\n                },\n                children: \"Save Edited JSON\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 177,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => downloadJson(pdfName),\n                style: {\n                  padding: \"10px\",\n                  backgroundColor: \"#28a745\",\n                  color: \"#fff\",\n                  border: \"none\",\n                  borderRadius: \"4px\",\n                  cursor: \"pointer\"\n                },\n                children: \"Download JSON\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 206,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true)]\n        }, pdfName, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"qhj4wsnfoVO8/Agi4FUOijxi8X8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","axios","UploadComponent","PdfViewerComponent","jsxDEV","_jsxDEV","Fragment","_Fragment","syntaxHighlight","json","JSON","stringify","undefined","replace","match","cls","test","App","_s","pdfFiles","setPdfFiles","schemas","setSchemas","isLoading","setIsLoading","jsonDivRefs","onDrop","acceptedFiles","length","file","formData","FormData","append","response","post","headers","data","schema","prevFiles","prevSchemas","name","jsonEditValue","error","console","handleJsonEditChange","pdfName","event","selection","window","getSelection","range","getRangeAt","startOffset","updatedJsonEditValue","target","textContent","setTimeout","current","newRange","document","createRange","setStart","childNodes","collapse","removeAllRanges","addRange","downloadJson","_schemas$pdfName","schemaData","jsonString","blob","Blob","type","url","URL","createObjectURL","link","createElement","href","download","body","appendChild","click","removeChild","style","display","height","children","width","padding","borderRight","overflowY","fileName","_jsxFileName","lineNumber","columnNumber","map","marginTop","color","pdfFile","_schemas$pdfName2","marginBottom","ref","el","contentEditable","onInput","e","dangerouslySetInnerHTML","__html","fontFamily","fontSize","border","borderRadius","backgroundColor","overflow","whiteSpace","outline","resize","gap","onClick","parsedJson","parse","alert","cursor","_c","$RefreshReg$"],"sources":["/Users/jianpeng/Desktop/PDFExtract/frontend/src/App.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\nimport axios from \"axios\";\nimport UploadComponent from \"./components/UploadComponent\";\nimport PdfViewerComponent from \"./components/PdfViewerComponent\";\n\n// Function to apply basic syntax highlighting to JSON\nconst syntaxHighlight = (json) => {\n    if (typeof json !== \"string\") {\n        json = JSON.stringify(json, undefined, 2);\n    }\n    json = json\n        .replace(/&/g, \"&amp;\")\n        .replace(/</g, \"&lt;\")\n        .replace(/>/g, \"&gt;\");\n    return json.replace(\n        /(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|\\b-?\\d+(?:\\.\\d*)?(?:[eE][+-]?\\d+)?\\b)/g,\n        (match) => {\n            let cls = \"number\";\n            if (/^\"/.test(match)) {\n                if (/:$/.test(match)) {\n                    cls = \"key\";\n                } else {\n                    cls = \"string\";\n                }\n            } else if (/true|false/.test(match)) {\n                cls = \"boolean\";\n            } else if (/null/.test(match)) {\n                cls = \"null\";\n            }\n            return `<span class=\"${cls}\">${match}</span>`;\n        }\n    );\n};\n\nfunction App() {\n    const [pdfFiles, setPdfFiles] = useState([]); // Store PDF files\n    const [schemas, setSchemas] = useState({}); // Store JSON schemas for each PDF\n    const [isLoading, setIsLoading] = useState(false);\n    const jsonDivRefs = useRef({}); // Refs for each JSON div to handle cursor positions\n\n    // Handle multiple file uploads\n    const onDrop = async (acceptedFiles) => {\n        if (acceptedFiles.length === 0) return;\n\n        setIsLoading(true);\n\n        for (const file of acceptedFiles) {\n            const formData = new FormData();\n            formData.append(\"pdf\", file);\n\n            try {\n                const response = await axios.post(\"http://localhost:5001/upload\", formData, {\n                    headers: {\n                        \"Content-Type\": \"multipart/form-data\",\n                    },\n                });\n\n                // Update the state with the received JSON schema for each file\n                if (response.data && response.data.schema) {\n                    setPdfFiles((prevFiles) => [...prevFiles, file]);\n                    setSchemas((prevSchemas) => ({\n                        ...prevSchemas,\n                        [file.name]: {\n                            schema: response.data.schema,\n                            jsonEditValue: JSON.stringify(response.data.schema, null, 2),\n                        },\n                    }));\n                }\n            } catch (error) {\n                console.error(\"Error uploading PDF:\", error);\n            }\n        }\n\n        setIsLoading(false);\n    };\n\n    // Handle changes to the editable JSON text area for each PDF\n    const handleJsonEditChange = (pdfName, event) => {\n        const selection = window.getSelection();\n        const range = selection.getRangeAt(0);\n        const startOffset = range.startOffset;\n\n        const updatedJsonEditValue = event.target.textContent;\n\n        setSchemas((prevSchemas) => ({\n            ...prevSchemas,\n            [pdfName]: {\n                ...prevSchemas[pdfName],\n                jsonEditValue: updatedJsonEditValue,\n            },\n        }));\n\n        // Restore cursor position after updating the content\n        setTimeout(() => {\n            if (jsonDivRefs.current[pdfName]) {\n                const newRange = document.createRange();\n                newRange.setStart(jsonDivRefs.current[pdfName].childNodes[0], startOffset);\n                newRange.collapse(true);\n                selection.removeAllRanges();\n                selection.addRange(newRange);\n            }\n        }, 0);\n    };\n\n    // Function to download the JSON schema for each PDF\n    const downloadJson = (pdfName) => {\n        const schemaData = schemas[pdfName]?.schema;\n        if (!schemaData) return;\n\n        // Create a Blob with the JSON data\n        const jsonString = JSON.stringify(schemaData, null, 2);\n        const blob = new Blob([jsonString], { type: \"application/json\" });\n\n        // Create an anchor element and trigger a download\n        const url = URL.createObjectURL(blob);\n        const link = document.createElement(\"a\");\n        link.href = url;\n        link.download = `${pdfName.replace(\".pdf\", \"_schema.json\")}`; // Generate filename\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n    };\n\n    return (\n        <div style={{ display: \"flex\", height: \"100vh\" }}>\n            {/* Left Side - Upload PDFs & PDF Viewer */}\n            <div style={{ width: \"50%\", padding: \"20px\", borderRight: \"1px solid #ccc\", overflowY: \"auto\" }}>\n                {/* Upload Component */}\n                <UploadComponent onDrop={onDrop} isLoading={isLoading} />\n\n                {/* PDF Viewer for each uploaded file */}\n                {pdfFiles.map((file) => (\n                    <div key={file.name} style={{ marginTop: \"20px\" }}>\n                        <h4 style={{ color: \"#000\" }}>{file.name}</h4>\n                        <PdfViewerComponent pdfFile={file} />\n                    </div>\n                ))}\n            </div>\n\n            {/* Right Side - Highlighted JSON Schema Editors */}\n            <div style={{ width: \"50%\", padding: \"20px\", overflowY: \"auto\" }}>\n                {pdfFiles.map((file) => {\n                    const pdfName = file.name;\n                    const schema = schemas[pdfName]?.jsonEditValue;\n\n                    return (\n                        <div key={pdfName} style={{ marginBottom: \"30px\" }}>\n                            <h3 style={{ color: \"#000\" }}>Highlighted JSON Schema Preview for {pdfName}</h3>\n                            {schema && (\n                                <>\n                                    {/* Highlighted JSON Schema */}\n                                    <div\n                                        ref={(el) => (jsonDivRefs.current[pdfName] = el)}\n                                        contentEditable\n                                        onInput={(e) => handleJsonEditChange(pdfName, e)}\n                                        dangerouslySetInnerHTML={{ __html: syntaxHighlight(schema) }}\n                                        style={{\n                                            width: \"100%\",\n                                            padding: \"15px\",\n                                            fontFamily: \"monospace\",\n                                            fontSize: \"14px\",\n                                            border: \"1px solid #ccc\",\n                                            borderRadius: \"4px\",\n                                            backgroundColor: \"#2b2b2b\",\n                                            color: \"#ffffff\",\n                                            overflow: \"auto\",\n                                            whiteSpace: \"pre\",\n                                            outline: \"none\",\n                                            marginBottom: \"10px\",\n                                            resize: \"vertical\", // Allows resizing vertically\n                                        }}\n                                    ></div>\n\n                                    {/* Button Container */}\n                                    <div style={{ display: \"flex\", gap: \"10px\", marginBottom: \"20px\" }}>\n                                        {/* Save Edited JSON Button */}\n                                        <button\n                                            onClick={() => {\n                                                try {\n                                                    const parsedJson = JSON.parse(schemas[pdfName].jsonEditValue);\n                                                    setSchemas((prevSchemas) => ({\n                                                        ...prevSchemas,\n                                                        [pdfName]: {\n                                                            ...prevSchemas[pdfName],\n                                                            schema: parsedJson,\n                                                        },\n                                                    }));\n                                                    alert(\"JSON updated successfully!\");\n                                                } catch (error) {\n                                                    alert(\"Invalid JSON format. Please correct it before saving.\");\n                                                }\n                                            }}\n                                            style={{\n                                                padding: \"10px\",\n                                                backgroundColor: \"#007bff\",\n                                                color: \"#fff\",\n                                                border: \"none\",\n                                                borderRadius: \"4px\",\n                                                cursor: \"pointer\",\n                                            }}\n                                        >\n                                            Save Edited JSON\n                                        </button>\n\n                                        {/* Download JSON Button */}\n                                        <button\n                                            onClick={() => downloadJson(pdfName)}\n                                            style={{\n                                                padding: \"10px\",\n                                                backgroundColor: \"#28a745\",\n                                                color: \"#fff\",\n                                                border: \"none\",\n                                                borderRadius: \"4px\",\n                                                cursor: \"pointer\",\n                                            }}\n                                        >\n                                            Download JSON\n                                        </button>\n                                    </div>\n                                </>\n                            )}\n                        </div>\n                    );\n                })}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}