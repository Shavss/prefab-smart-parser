{"ast":null,"code":"var _jsxFileName = \"/Users/jianpeng/Desktop/PDFExtract/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport UploadComponent from \"./components/UploadComponent\";\nimport JsonDisplayComponent from \"./components/JsonDisplayComponent\";\nimport PdfViewerComponent from \"./components/PdfViewerComponent\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [jsonSchema, setJsonSchema] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [pdfFile, setPdfFile] = useState(null);\n  const onDrop = async acceptedFiles => {\n    if (acceptedFiles.length === 0) return;\n    setIsLoading(true);\n    setPdfFile(acceptedFiles[0]); // Set the uploaded PDF file for visualization\n\n    const formData = new FormData();\n    formData.append(\"pdf\", acceptedFiles[0]);\n    try {\n      const response = await axios.post(\"http://localhost:5001/upload\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      });\n\n      // Update the state with the received JSON schema\n      if (response.data && response.data.schema) {\n        setJsonSchema(response.data.schema); // Update to properly access the returned schema\n      }\n    } catch (error) {\n      console.error(\"Error uploading PDF:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      height: \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        display: \"flex\",\n        flexDirection: \"column\",\n        padding: '10px',\n        borderRight: '1px solid #ccc'\n      },\n      children: [/*#__PURE__*/_jsxDEV(UploadComponent, {\n        onDrop: onDrop,\n        isLoading: isLoading,\n        pdfFile: pdfFile\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), pdfFile && /*#__PURE__*/_jsxDEV(PdfViewerComponent, {\n        pdfFile: pdfFile\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        overflow: 'auto',\n        padding: '10px'\n      },\n      children: /*#__PURE__*/_jsxDEV(JsonDisplayComponent, {\n        jsonSchema: jsonSchema\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"ZZjjJHaT3pZJaG+9BeLAbinAsZ4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","UploadComponent","JsonDisplayComponent","PdfViewerComponent","jsxDEV","_jsxDEV","App","_s","jsonSchema","setJsonSchema","isLoading","setIsLoading","pdfFile","setPdfFile","onDrop","acceptedFiles","length","formData","FormData","append","response","post","headers","data","schema","error","console","style","display","height","children","flex","flexDirection","padding","borderRight","fileName","_jsxFileName","lineNumber","columnNumber","overflow","_c","$RefreshReg$"],"sources":["/Users/jianpeng/Desktop/PDFExtract/frontend/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport UploadComponent from \"./components/UploadComponent\";\nimport JsonDisplayComponent from \"./components/JsonDisplayComponent\";\nimport PdfViewerComponent from \"./components/PdfViewerComponent\";\n\nfunction App() {\n    const [jsonSchema, setJsonSchema] = useState(null);\n    const [isLoading, setIsLoading] = useState(false);\n    const [pdfFile, setPdfFile] = useState(null);\n\n    const onDrop = async (acceptedFiles) => {\n        if (acceptedFiles.length === 0) return;\n\n        setIsLoading(true);\n        setPdfFile(acceptedFiles[0]); // Set the uploaded PDF file for visualization\n\n        const formData = new FormData();\n        formData.append(\"pdf\", acceptedFiles[0]);\n\n        try {\n            const response = await axios.post(\"http://localhost:5001/upload\", formData, {\n                headers: {\n                    \"Content-Type\": \"multipart/form-data\",\n                },\n            });\n\n            // Update the state with the received JSON schema\n            if (response.data && response.data.schema) {\n                setJsonSchema(response.data.schema); // Update to properly access the returned schema\n            }\n        } catch (error) {\n            console.error(\"Error uploading PDF:\", error);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    return (\n        <div style={{ display: \"flex\", height: \"100vh\" }}>\n            {/* Left Side - Upload PDF & PDF Viewer */}\n            <div style={{ flex: 1, display: \"flex\", flexDirection: \"column\", padding: '10px', borderRight: '1px solid #ccc' }}>\n                {/* Upload Component */}\n                <UploadComponent onDrop={onDrop} isLoading={isLoading} pdfFile={pdfFile} />\n\n                {/* PDF Viewer */}\n                {pdfFile && <PdfViewerComponent pdfFile={pdfFile} />}\n            </div>\n\n            {/* Right Side - JSON Schema Display */}\n            <div style={{ flex: 1, overflow: 'auto', padding: '10px' }}>\n                <JsonDisplayComponent jsonSchema={jsonSchema} />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}